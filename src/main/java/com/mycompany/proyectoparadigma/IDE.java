package com.mycompany.proyectoparadigma;

import static java.lang.Integer.parseInt;
import java.util.HashMap;
import java.util.StringTokenizer;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
/**
 *
 * @author reyes
 */
public class IDE extends javax.swing.JFrame {

    int contador = 0;
    String error;
    String mensaje;
    String entrada;
    String salida = "";

    String[] keywords = {"sumar", "restar", "multiplicar", "dividir","promedio", "int"};
    String[] aritmetica = {"+", "-", "*", "/", "="};

    HashMap<String, Integer> palabrasRervadas = new HashMap<>();
    HashMap<String, String> guardarTokens = new HashMap<>();

    public IDE() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")

    private void inicializar() {
        for (String keyword : keywords) {
            palabrasRervadas.put(keyword, 0);
        }
    }

    //boton de compilar
    private void obtenerToken() {
        inicializar();

        entrada = txtEntrada.getText();
        StringTokenizer token = new StringTokenizer(entrada, ";\n\r");
        byte linea = 1;
        while (token.hasMoreTokens()) {
            String tokens = token.nextToken();

            if (estructura(tokens)) {// VERIFICAMOS SI LA ESTRUCTURA ES CORRECTA
                String resultado = comparar(tokens);// RETORNA QUE ES: METODO, VARIBLE ETC.

                if (!resultado.equals("Palabra reservada no existe")) {
                    //^(int )[\w]{1}( ){1}(=)?(\s\w\s)*[+]?(\s\w)?;$
                    if (resultado.equals("sumar") || resultado.equals("restar") || resultado.equals("dividir")
                            || resultado.equals("multiplicar") || resultado.equals("promedio")) {
                        metodos(tokens);
                    } else {

                        variables(tokens);
                    }

                } else {
                    salida += "Error en la linea: " + linea + " => Metodo inexistente " + "\n";
                }

            } else {
                salida += "Error en la linea: " + linea + " => Estrucuta erronea " + "\n";
            }

            linea++;
        }

        txtResultado.setText(salida);

    }

    private boolean estructura(String linea) {// AQUI SE PONEN TODAS LAS ESTRUCTURAS 
        String[] estructuras = {
            "([a-z]+) ([a-z]+|[0-9]+) ([a-z]+|[0-9]+)([ ]){0,}",// sumar 2 3 => Estructura para metodos
            "([a-z]+) ([a-z]+) = ([a-z]+|[0-9]+) [(+)|(\\-)|(/)|(*)] ([a-z]+|[0-9]+)",// int a = 3 + 2 OR int a = d + 2 => permite + - / *
            "([a-z]+) ([a-z]+)",// int a => declaracio sin valor, valor por defecto 0
            "([a-z]+) ([a-z]+) (=) ([a-z]+|[0-9]+)",// int a = 3 OR int a = b
            "([a-z]+) (=) ([a-z]+|[0-9]+)",
            "([a-z]+) = ([a-z]+|[0-9]+) [(+)|(\\-)|(/)|(*)] ([a-z]+|[0-9]+)"

        };
        Pattern pat;

        for (String estruct : estructuras) {
            pat = Pattern.compile(estruct);
            if (pat.matcher(linea).matches()) {
                return true;
            }
        }
        /* cambiar el tipo de retorno para verificar si es una linea en blaco,
           estructura correcta o estructura incorrecta */
        return false;
        //return true;
    }

    private void metodos(String linea) {
        String[] palabraReservada = linea.split(" ");
        palabraReservada[1] = esLetra(palabraReservada[1]);
        palabraReservada[2] = esLetra(palabraReservada[2]);

        switch (palabraReservada[0]) {

            case "sumar" -> {
                int suma = parseInt(palabraReservada[1]) + parseInt(palabraReservada[2]);
                salida += "Suma " + palabraReservada[1] + " + " + palabraReservada[2] + " = " + suma + "\n";

            }

            case "restar" -> {
                String resultResta = String.valueOf(parseInt(palabraReservada[1]) - parseInt(palabraReservada[2]));
                salida += "Resta " + palabraReservada[1] + " - " + palabraReservada[2] + " = " + resultResta + "\n";

            }

            case "multiplicar" -> {
                String resultMult = String.valueOf(parseInt(palabraReservada[1]) * parseInt(palabraReservada[2]));
                salida += "Multiplicacion " + palabraReservada[1] + " x " + palabraReservada[2] + " = " + resultMult + "\n";
            }

            case "dividir" -> {
                String resultResta = String.valueOf(parseInt(palabraReservada[1]) / parseInt(palabraReservada[2]));
                salida += "divicion " + palabraReservada[1] + " / " + palabraReservada[2] + " = " + resultResta + "\n";
            }
            case "promedio" -> {
                String resultPromed = String.valueOf((Double.parseDouble(palabraReservada[1]) + Double.parseDouble(palabraReservada[2])) / 2);
                
                salida += "promedio " + palabraReservada[1] + " y " + palabraReservada[2] + " = " + resultPromed + "\n";
            }
        }
    }

    private void variables(String linea) {
        String[] palabraReservada = linea.split(" ");
        Pattern pat = Pattern.compile("");
        int valor = 0;
        int signo = 4;
        int num1 = 3;
        int num2 = 5;

        if (palabraReservada.length > 4) {
            //0 1 2 [3] 4
            //a = 2  +  2
            if (!(palabraReservada[0].equals("int"))) {
                signo -= 1;
                num1 -= 1;
                num2 -= 1;
            }
            palabraReservada[num1] = esLetra(palabraReservada[num1]);
            palabraReservada[num2] = esLetra(palabraReservada[num2]);
            //             0  1 2 3 [4] 5
            //            int a = 4  +  4; 
            switch (palabraReservada[signo]) {
                case "+" -> {

                    valor = parseInt(palabraReservada[num1]) + parseInt(palabraReservada[num2]);
                }
                case "-" -> {
                    valor = parseInt(palabraReservada[num1]) - parseInt(palabraReservada[num2]);
                }
                case "/" -> {
                    valor = parseInt(palabraReservada[num1]) / parseInt(palabraReservada[num2]);
                }
                case "*" -> {
                    valor = parseInt(palabraReservada[num1]) * parseInt(palabraReservada[num2]);
                }
            }

            if (!(palabraReservada[0].equals("int"))) {
                palabrasRervadas.put(palabraReservada[0], valor);
                return;
            }

        } else {//                             0  1 2 3
            // entran: int a & ( int a = 2 OR int a = b )
            if (palabraReservada.length == 4) {
                palabraReservada[3] = esLetra(palabraReservada[3]);
                valor = parseInt(palabraReservada[3]);
            }
            // entran: a = 2 OR a = b 
            if (palabraReservada.length == 3) {
                palabraReservada[2] = esLetra(palabraReservada[2]);
                valor = parseInt(palabraReservada[2]);
                palabrasRervadas.put(palabraReservada[0], valor);
                return;
            }
        }

        palabrasRervadas.put(palabraReservada[1], valor);

    }

    private String comparar(String token) {
        error = "Palabra reservada no existe";
        mensaje = error;
        String palabraReservada = token.split(" ")[0];

        palabrasRervadas.forEach((key, value) -> {

            if (palabraReservada.equals(key)) {
                mensaje = key;
            }

        });

        return mensaje;

    }

    /*private String buscarKeywords(String linea){
        return linea.split(" ")[0];
   }*/
 /*private void analizarLexico(){
        
        String token, texto = "";
        entrada = txtEntrada.getText();
        String[] tokens = {"&", "#", ".", ",", "{", "}", "[", "]", "(", ")"};
        String[] keywords = {"imprimir", "cadena", "numero", "principal"};
        String[] aritmetica = {"+", "-", "*", "/", "="};
    }*/
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtResultado = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtEntrada = new javax.swing.JTextArea();
        jButton2 = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jButton1.setText("Ejecutar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 20, 80, 30));

        txtResultado.setColumns(20);
        txtResultado.setRows(5);
        txtResultado.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        txtResultado.setEnabled(false);
        jScrollPane1.setViewportView(txtResultado);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 170, 570, 200));

        txtEntrada.setColumns(20);
        txtEntrada.setRows(5);
        jScrollPane2.setViewportView(txtEntrada);

        getContentPane().add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 10, 420, 100));

        jButton2.setText("Compilar");
        getContentPane().add(jButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 80, 80, 30));
        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 680, 400));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        salida = "";
        palabrasRervadas.clear();
        obtenerToken();
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(IDE.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(IDE.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(IDE.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(IDE.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new IDE().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea txtEntrada;
    private javax.swing.JTextArea txtResultado;
    // End of variables declaration//GEN-END:variables

    private String esLetra(String ptr) {
        /* false : retorna valor de la letra
           true : retorna el valor */

        Pattern pat = Pattern.compile("[0-9]+");// estructura de metodos
        // true : retorna valor, null: retorna 0 , existe retorna el valor guardado
        return pat.matcher(ptr).matches() ? ptr : palabrasRervadas.get(ptr) == null ? "0" : String.valueOf(palabrasRervadas.get(ptr));
    }

}
